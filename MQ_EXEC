import subprocess
import sys
import logging

# Check if all three arguments are provided
if len(sys.argv) != 4:
    print("Usage: python script.py <fid> <queue_manager> <log_file>")
    sys.exit(1)

# Get the arguments
fid = sys.argv[1]
queue_manager_name = sys.argv[2]
log_file = sys.argv[3]

# Configure logging for your script
logging.basicConfig(
    level=logging.INFO,
    filename=log_file,
    format='%(asctime)s [%(levelname)s] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Log a start message for your script
logging.info("Performing CRUD Operations on Normal Queue in MQ")

try:
    # Construct the file paths for your MQSC scripts
    create_script = f"create_queue.mqsc"
    delete_script = f"delete_queue.mqsc"

    # Execute the create_queue.mqsc script with fid and queue_manager_name substitutions
    create_command = f"/usr/sbin/runuser {fid} -c 'runmqsc {queue_manager_name} < {create_script}'"
    logging.info(f"Executing CREATE operation with FID: {fid}, Queue Manager: {queue_manager_name}")
    
    # Capture the command output and log it
    create_output = subprocess.check_output(create_command, shell=True, stderr=subprocess.STDOUT, text=True)
    logging.info("[CREATE COMMAND OUTPUT]\n" + create_output)

    # Execute the delete_queue.mqsc script with fid and queue_manager_name substitutions
    delete_command = f"/usr/sbin/runuser {fid} -c 'runmqsc {queue_manager_name} < {delete_script}'"
    logging.info(f"Executing DELETE operation with FID: {fid}, Queue Manager: {queue_manager_name}")
    
    # Capture the command output and log it
    delete_output = subprocess.check_output(delete_command, shell=True, stderr=subprocess.STDOUT, text=True)
    logging.info("[DELETE COMMAND OUTPUT]\n" + delete_output)

    # Log a success message
    logging.info("Script executions completed successfully.")

except subprocess.CalledProcessError as e:
    # Log a failure message and the error details
    logging.error(f"Script executions failed with error: {e}")
    sys.exit(1)  # Exit with a non-zero status code to indicate failure
except Exception as e:
    # Log other unexpected exceptions
    logging.error(f"An unexpected error occurred: {e}")
    sys.exit(1)  # Exit with a non-zero status code to indicate failure

# Log an end message for your script
logging.info("CRUD Operations on Normal Queue in MQ completed.")
