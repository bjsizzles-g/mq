.
import argparse
import subprocess
import logging

# Configure the logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# MQSC file path (hardcoded)
MQSC_FILE = '/path/to/mqscfile.txt'

# Function to run the second command as the 'fid' user
def run_second_command(qmgr_name, fid_user, queue_name, log_file):
    command = f'/usr/sbin/runuser {fid_user} -c "mqauth -m {qmgr_name} -t -q -n {queue_name} -p {fid_user} +allmqi > {log_file}"'
    try:
        subprocess.run(command, shell=True, check=True)
        logging.info(f"Updated permission as requested for queue {queue_name}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error updating permission for queue {queue_name}: {e}")

# Main function
def main():
    parser = argparse.ArgumentParser(description="Execute MQSC command and run the second command")
    parser.add_argument("qmgr_name", help="IBM MQ Queue Manager name")
    parser.add_argument("fid_user", help="The 'fid' user")
    parser.add_argument("log_file", help="Path to the log file")

    args = parser.parse_args()

    try:
        with open(MQSC_FILE, 'r') as mqsc_file:
            for line in mqsc_file:
                if line.strip().startswith("DEFINE QLOCAL("):
                    queue_name = line.split("(")[1].split(")")[0]
                    run_second_command(args.qmgr_name, args.fid_user, queue_name, args.log_file)
    except FileNotFoundError:
        print(f"MQSC file not found: {MQSC_FILE}")

if __name__ == "__main__":
    main()
